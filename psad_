#!/usr/bin/sh
#  -*- sh -*-

: << =cut

=head1 NAME

psad_ - Wildcard plugin to monitor count of banned IPs via psad (https://cipherdyne.org/psad/)

=head1 CONFIGURATION

This is a wildcard plugin.
The possible wildcard values are the following: banned, levels

Example:

 ln -s /usr/share/munin/plugins/psad_ /etc/munin/plugins/psad_banned
 ln -s /usr/share/munin/plugins/psad_ /etc/munin/plugins/psad_levels
 
 
 This plugin MUST run with root privileges.
 
 For example, this or another plugins config file /etc/munin/plugin-conf.d/00-default must contain:
 
 [psad_*]
  user root

Optionally, you can specify path to the psad log file.

 [psad_*]
  user root
  env.psad_log_file /var/log/psad/auto_blocked_iptables
  

Known issues:
- [ ] works only with IPv4 addresses

  
=head1 AUTHOR

Copyright (C) 2021 David Schweiner 

=head1 LICENSE

GPLv3

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

#. "$MUNIN_LIBDIR/plugins/plugin.sh"


function banned () {
	echo -n "bl.value "
	grep -oE "$REG_IPv4 $ABI" | wc -l
}

function get_ips_from_dir_path () {
	declare -a IPs=()
	for d in $1/*/ ; do
		 IPs+=($(echo $d | grep -oE $REG_IPv4))
	done
	echo ${IPs[*]}
}
function levels () {
	local ALL_IPs=$(get_ips_from_dir_path "$BASE_PATH")
	local LEVELS=(0 0 0 0 0)
	echo $BASE_PATH/auto_blocked_iptables
	for ip in  $ALL_IPs
	do
		grep -m1 $ip $BASE_PATH/auto_blocked_iptables > /dev/null
		if [ $? -eq 0 ]; then
			n=$(head -n1 "$BASE_PATH/$ip/danger_level")
			LEVELS[(($n-1))]=$((LEVELS[(($n-1))]+1))
		fi
	done
	
	v=1
	for n in ${LEVELS[@]}
	do
		echo "level""$v.value $n"
		v=$(($v+1))
	done
}

if [ -r "$psad_log_file" ];then
    ABI="$psad_log_file"
else
    ABI="/var/log/psad/auto_blocked_iptables"
fi

if [ "$1" = "autoconf" ]; then
	if [ -r "$ABI" ]; then
		echo yes
	else
		echo no
		exit -1
	fi
    exit 0
fi

BASE_PATH=$(dirname "$ABI")
FUNC=$(echo "$0" | cut -d _ -f 2-)
REG_IPv4="(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"

if [ "$1" = "config" ] && [ "$FUNC" = "banned" ]; then
	echo 'graph_title psad - Total count of blocked IPs'
	echo 'graph_args --base 1000 -l 0'
	echo 'graph_vlabel Count'
	echo 'graph_scale no'
	echo 'graph_category security'
	echo 'graph_info This graph shows count of blocked IPs by psad'
	echo 'bl.label IPs'
	echo 'bl.info This graph shows count of blocked IPs by psad'
	exit 0
elif [ "$1" = "config" ] && [ $FUNC = "levels" ]; then
	for i in  {1..5}
	do
		echo 'graph_title psad - Count of blocked IPs by danger level'
		echo 'graph_category security'
		echo 'graph_info This graph shows count of blocked IPs danger level by psad'
		echo 'graph_args --base 1000 -l 0'
		echo 'graph_vlabel Count'
		echo "level$i.draw AREA"
		echo "level$i.label level $i"
	done
	exit 0
fi

case "$FUNC" in
        banned)
            banned
        ;;
		levels)
			levels
esac

